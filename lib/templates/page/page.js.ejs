import { getExample } from "../../services/api.js";
import Prompt from "../../utils/Prompt.js";
<% if (data.isList) { %>import Paging from "../../utils/Paging.js";<% } -%>
<% if (data.isForm) { %>import FormValidator from "../../utils/FormValidator.js";<% } -%>

const App = getApp();
<% if (data.isList) { _%>
let PagingInstance;
let listComponent;
<% } _%>

Page({
  data: {
    <% if (data.isList) { %>
    canLoadMore: true,
    list: [],
    <% } _%>    
    <% if (data.isForm) { %>
    formData:{
        // define fields
    },    
    formRules:[
        // define rules for fields in formData
    ],
    <% } %>
  },

  async onLoad(options) {
    
  },

  async onShow(){
    <% if (data.isList) { %>
    listComponent = this.selectComponent("#list")
    PagingInstance = new Paging({
        context: this,
        pagingName: '<%= data.name %>', 
        requestApi:'get<%= data.name %>',
        size:20,
        params:{
          groupId: 1
        }
    })
    await PagingInstance.init()
    listComponent.setDividerText()
    <% } %>
  },

  <% if (data.isForm) { %>
  async formSubmit() {
    FormValidator(formData, formRules).then(_ => {
        // pass, send submit request
    }).catch(err => {
        // fail, extra error processor 
    })
  },
  <% } _%>

  <% if (data.isList) { %>
  async onPullDownRefresh() {
    wx.stopPullDownRefresh()
    await PagingInstance.init()
    listComponent.setDividerText()
  },
  async onReachBottom() {
    await PagingInstance.get()
    listComponent.setDividerText()
  },
  <% } _%>

});